require('dotenv').config();
const YouTubeShortsGenerator = require('./YouTubeShortsGenerator');
const fs = require('fs').promises;
const readline = require('readline');
const path = require('path');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function main() {
    try {
        const generator = new YouTubeShortsGenerator({
            openaiApiKey: process.env.OPENAI_API_KEY
        });

        console.log('\n=== YouTube Shorts Generator ===');
        const videoUrl = await question('–í–≤–µ–¥–∏—Ç–µ URL YouTube –≤–∏–¥–µ–æ: ');

        console.log('\n1. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...');
        const videoPath = await generator.downloadVideo(videoUrl);

        if (!videoPath) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ');
            return;
        }
        console.log('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n');

        console.log('2. –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —à–æ—Ä—Ç—Å–æ–≤...');
        const shorts = await generator.generateShorts(videoPath);

        if (shorts && shorts.length > 0) {
            console.log('‚úÖ –®–æ—Ä—Ç—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã\n');

            console.log('3. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∫–∞–∂–¥–æ–≥–æ —à–æ—Ä—Ç—Å–∞...');
            for (const short of shorts) {
                if (!short || !short.path) continue;

                console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ —à–æ—Ä—Ç—Å–∞: ${path.basename(short.path)}`);
                console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞: ${short.description}`);

                const analysis = await generator.analyzePotentialViews(short.path);
                console.log(`\nüéØ –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${analysis.views.toLocaleString('ru-RU')}`);
                console.log('\nüìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑:');
                console.log(analysis.analysis);
                console.log('\n---');
            }
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–æ—Ä—Ç—Å—ã');
        }

        // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await fs.unlink(videoPath);
        console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ!');
    } catch (error) {
        console.error('\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
    } finally {
        rl.close();
    }
}

main();
